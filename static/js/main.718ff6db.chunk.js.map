{"version":3,"sources":["Layout.js","random.js","sims/Classroom.js","sims/Monty.js","sims/Test.js","App.js","reportWebVitals.js","index.js"],"names":["Layout","children","className","to","number","min","max","range","Math","floor","random","set","options","size","undefined","minSize","maxSize","sizeModulo","setItem","i","shuffle","Array","keys","map","result","length","choose","chosen","reducedSet","index","filter","e","Classroom","useState","selections","setSelections","girlsSelected","setGirlsSelected","Date","startTime","elapsedTime","setElapsedTime","useEffect","setTimeout","classroom","first","second","other","percentGirls","Monty","iterations","setIterations","noSwitchWins","setNoSwitchWins","switchWins","setSwitchWins","selected","predicate","pairs","p","last","unselected","percentNoSwitchWins","percentSwitchWins","Test","chooseCounts","setChooseCounts","times","percent","item","c","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.718ff6db.chunk.js","sourcesContent":["import { NavLink } from \"react-router-dom\";\r\n\r\nexport default function Layout({children}) {\r\n    return <div className=\"layout\">\r\n        <aside>\r\n            <ul>\r\n                <li><NavLink to=\"probability-simulator/monty\">Monty Hall</NavLink></li>\r\n                <li><NavLink to=\"probability-simulator/classroom\">Classroom</NavLink></li>\r\n            </ul>\r\n        </aside>\r\n        {children}\r\n    </div>\r\n}   ","export function number(min, max) {\r\n    if (!max) {\r\n        max = min;\r\n        min = 0;\r\n    }\r\n\r\n    const range = [Math.min(min, max), Math.max(min, max) + 1];\r\n    min = range[0];\r\n    max = range[1];\r\n\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n\r\nexport function set(options) {\r\n    options = {...{\r\n        size: undefined,\r\n        minSize: 1, \r\n        maxSize: 10,\r\n        sizeModulo: 1,\r\n        setItem: i => 0,\r\n        shuffle: false,\r\n    }, ...options};\r\n\r\n    let size = options.size ? options.size : number(options.minSize, options.maxSize);\r\n    if (size % options.sizeModulo !== 0) {\r\n        size += (size % options.sizeModulo);\r\n    }\r\n\r\n    const set = [...Array(size).keys()].map(options.setItem);\r\n\r\n    if (options.shuffle) {\r\n        return shuffle(set);\r\n    }\r\n\r\n    return set;\r\n}\r\n\r\nexport function chooseWhere(set, predicate) {\r\n    let pairs = set.map((e,i) => ({e,i}));\r\n\r\n    if (typeof predicate === \"function\") {\r\n        pairs = pairs.filter(p => predicate(p.e, p.i));\r\n    }\r\n\r\n    const indices = pairs.map(p => p.i);\r\n    const [index] = choose(indices)\r\n\r\n    return [set[index], set.filter((e,i) => i !== index)];\r\n}\r\n\r\nexport function choose(set) {\r\n    const index = number(0, set.length - 1);\r\n\r\n    return [set[index], set.filter((e,i) => i !== index)];\r\n}\r\n\r\nexport function shuffle(set) {\r\n    set = [...set];\r\n    let result = [];\r\n\r\n    while (set.length > 1) {\r\n        const [chosen, reducedSet] = choose(set);\r\n        result = [...result, chosen];\r\n        set = reducedSet;\r\n    }\r\n\r\n    return result;\r\n}","import { useEffect, useState } from \"react\"\r\nimport * as random from '../random'\r\n\r\nexport default function Classroom() {\r\n    const [selections, setSelections] = useState(0);\r\n    const [girlsSelected, setGirlsSelected] = useState(0);\r\n    const [startTime] = useState(new Date());\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            // Create random size classroom of even size with boys (0) and girls (1).\r\n            let classroom = random.set({\r\n                minSize: 10,\r\n                maxSize: 100,\r\n                sizeModulo: 2,\r\n                setItem: i => i%2,\r\n            });\r\n            \r\n            while (true) {\r\n                const [first, rest] = random.choose(classroom);\r\n                const [second] = random.choose(rest);\r\n\r\n                if (first !== 0 && second !== 0) { // Boy not picked\r\n                    continue;\r\n                }\r\n\r\n                const other = first === 0 ? second : first;\r\n\r\n                setSelections(i => i + 1);\r\n                setGirlsSelected(i => other === 1 ? i + 1 : i);\r\n\r\n                setElapsedTime(Math.floor((new Date() - startTime) / 1000))\r\n\r\n                break;\r\n            }\r\n        }, 100)\r\n    })\r\n\r\n    const percentGirls = (selections !== 0) ? girlsSelected / selections : 0;\r\n\r\n    return <article className=\"classroom sim\">\r\n        <h2>Classroom</h2>\r\n        <p><strong>Question: </strong>\r\n            Out of a class of equal boys and equal girls two children are selected \r\n            randomly. You are told that one of them is a boy, what is the chance \r\n            that a girl was selected?\r\n        </p>\r\n\r\n        <h3>Operations</h3>\r\n        <ol>\r\n            <li>Generate classroom of random size between 10 and 100 with even boys and girls.</li>\r\n            <li>Choose 2 children at random from classroom.</li>\r\n            <li>If a boy is not chosen, do not record.</li>\r\n            <li>Increment \"Total Selections\".</li>\r\n            <li>If other child is a girl, increment \"Girls Selected\".</li>\r\n        </ol>\r\n\r\n        <h3>Results</h3>\r\n        \r\n        <div>\r\n            <label>Total Selections: </label>\r\n            <span>{selections}</span>\r\n        </div>\r\n        <br/>\r\n\r\n        <div>\r\n            <label>Girls Selected: </label>\r\n            <span>{girlsSelected}</span>\r\n        </div>\r\n        <div>\r\n            <label>% Girls Selected: </label>\r\n            <span>{percentGirls * 100.0}%</span>\r\n        </div>\r\n        <br/>\r\n\r\n        <div>\r\n            <label>Elapsed Time: </label>\r\n            <span>{elapsedTime} seconds</span>\r\n        </div>\r\n    </article>\r\n}","import { useEffect, useState } from \"react\"\r\nimport * as random from '../random'\r\n\r\nexport default function Monty() {\r\n    const [iterations, setIterations] = useState(0);\r\n    const [noSwitchWins, setNoSwitchWins] = useState(0);\r\n    const [switchWins, setSwitchWins] = useState(0);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [startTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            // Create doors [0,1,0]\r\n            let doors = random.set({\r\n                size: 3,\r\n                setItem: i => i%2,\r\n            })\r\n\r\n            // Select a door, take a door away, and keep the unselected door.\r\n            const [selected, rest] = random.choose(doors);\r\n            const [, last] = random.chooseWhere(rest, i => i === 0); // is a goat\r\n            const [unselected] = last;\r\n\r\n            setIterations(i => i + 1);\r\n            setNoSwitchWins(i => selected ? i + 1 : i);\r\n            setSwitchWins(i => unselected ? i + 1 : i);\r\n\r\n            setElapsedTime(Math.floor((new Date() - startTime) / 1000));\r\n        }, 100)\r\n    })\r\n\r\n    const percentNoSwitchWins = iterations === 0 ? 0 : noSwitchWins / iterations;\r\n    const percentSwitchWins = iterations === 0 ? 0 : switchWins / iterations;\r\n\r\n    return <article className=\"monty sim\">\r\n        <h2>Monty Hall</h2>\r\n        <p><strong>Question: </strong>\r\n            A host gives you three doors. Behind 1 is a new car; behind the \r\n            other 2 is a goat. After selecting a door, the host takes away one\r\n            of the unselected doors, and offers to let you switch to the \r\n            remaining unselected door. What is the probability favoring this \r\n            switch? \r\n        </p>\r\n\r\n        <h3>Operations</h3>\r\n        <ol>\r\n            <li>Generate 3 doors, 2 with a goat (0) and 1 with a new car (1).</li>\r\n            <li>Choose a door at random.</li>\r\n            <li>Take away an unselected door.</li>\r\n            <li>Increment \"Total Iterations\".</li>\r\n            <li>If the selected door has the new car, increment \"Times No-Switch Wins\".</li>\r\n            <li>If the other door has the new car, increment \"Times Switch Wins\".</li>\r\n        </ol>\r\n\r\n        <h3>Results</h3>\r\n        <div>\r\n            <label>Total Iterations: </label>\r\n            <span>{iterations}</span>\r\n        </div>\r\n        <br/>\r\n\r\n        <div>\r\n            <label>Times No-Switch Wins: </label>\r\n            <span>{noSwitchWins}</span>\r\n        </div>\r\n        <div>\r\n            <label>% No-Switch Wins: </label>\r\n            <span>{percentNoSwitchWins * 100.0}%</span>\r\n        </div>\r\n        <br/>\r\n\r\n        <div>\r\n            <label>Times Switch Wins: </label>\r\n            <span>{switchWins}</span>\r\n        </div>\r\n        <div>\r\n            <label>% Switch Wins: </label>\r\n            <span>{percentSwitchWins * 100.0}%</span>\r\n        </div>\r\n        <br/>\r\n\r\n        <div>\r\n            <label>Elapsed Time: </label>\r\n            <span>{elapsedTime} seconds</span>\r\n        </div>\r\n    </article>\r\n}","import { useEffect, useState } from \"react\"\r\nimport * as random from '../random'\r\n\r\nexport default function Test() {\r\n    const [iterations, setIterations] = useState(0);\r\n    const [chooseCounts, setChooseCounts] = useState(null);\r\n    const [startTime] = useState(new Date());\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n\r\n            let set = chooseCounts ??\r\n                random.set({\r\n                    size: 10,\r\n                    setItem: i => ({ times: 0, percent: 0 }),\r\n                })\r\n\r\n            const number = random.number(0, set.length - 1);\r\n            const item = set[number];\r\n            set[number] = {...item, times: item.times+1};\r\n\r\n            set = set.map(item => ({...item, percent: item.times / iterations * 100}))\r\n\r\n            setIterations(i => i + 1);\r\n            setChooseCounts(set);\r\n\r\n            setElapsedTime(Math.floor((new Date() - startTime) / 1000));\r\n        }, 100)\r\n    })\r\n\r\n    return <article className=\"monty sim\">\r\n        <h2>Flat Distrobution Test</h2>\r\n\r\n        <div>\r\n            <label>Iterations: </label>\r\n            <span>{iterations}</span>\r\n        </div>\r\n\r\n        {chooseCounts?.map((c, i) => (\r\n            <div>\r\n                <label>Times {i} Chosen: </label>\r\n                <span>{c.times}</span> &nbsp;\r\n                <span>{c.percent}</span>\r\n            </div>\r\n        ))}\r\n\r\n        <div>\r\n            <label>Elapsed Time: </label>\r\n            <span>{elapsedTime} seconds</span>\r\n        </div>\r\n\r\n    </article>\r\n}","import { Route, Routes } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Layout from './Layout';\nimport Classroom from './sims/Classroom';\nimport Monty from './sims/Monty';\nimport Test from './sims/Test';\n\nfunction App() {\n\n    return <div className=\"app\">\n        <BrowserRouter>\n            <Layout>\n                <Routes>\n                <Route exact path=\"probability-simulator/monty\" element={<Monty/>}></Route>\n                <Route exact path=\"probability-simulator/classroom\" element={<Classroom/>}></Route>\n                <Route exact path=\"probability-simulator/test\" element={<Test/>}></Route>\n                </Routes>\n            </Layout>\n        </BrowserRouter>\n    </div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}